/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Algorithm;

import QueryDB.getData.Vector;
import com.mongodb.DBCursor;
import java.awt.Color;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Hanh Nguyen
 */
public class JFrameCluster extends javax.swing.JFrame {

    public static boolean flagMeaning;
    public static boolean flagFrequency;
    

    /**
     * Creates new form JFrameCluster
     */
    public JFrameCluster() {
        setLocation(400, 200);
        setResizable(false);
        initComponents();

        progressCluster.setStringPainted(true);
        progressCluster.setForeground(Color.cyan);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdMeaning = new javax.swing.JRadioButton();
        rdBoth = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textNumber1 = new javax.swing.JTextField();
        textNumber2 = new javax.swing.JTextField();
        btnExecute = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        progressCluster = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Phân theo");

        buttonGroup1.add(rdMeaning);
        rdMeaning.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        rdMeaning.setText("Một tầng");
        rdMeaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMeaningActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdBoth);
        rdBoth.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        rdBoth.setText("Hai tầng");
        rdBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBothActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(rdMeaning, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdBoth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(rdMeaning, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rdBoth, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("PHÂN CỤM DỮ LIỆU");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Số cụm");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Số cụm 1 ");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Số cụm 2 ");

        textNumber1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNumber1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(94, 94, 94)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnExecute.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnExecute.setText("Thực Hiện");
        btnExecute.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton2.setText("Kết Thúc");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        progressCluster.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        progressCluster.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        progressCluster.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressClusterStateChanged(evt);
            }
        });
        progressCluster.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                progressClusterPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(230, 230, 230))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressCluster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(progressCluster, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdMeaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMeaningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdMeaningActionPerformed

    private void rdBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBothActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdBothActionPerformed

    

    private Timer timer;

    public class progress implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent evt) {

            int i = progressCluster.getValue();

            if (i < progressCluster.getMaximum()) {
                i++;
                progressCluster.setValue(i);
                progressCluster.update(progressCluster.getGraphics());
            } else {
                timer.stop();
            }
        }
    }

    public void updateBar(int value) {
        int i = progressCluster.getValue();
        if (i < progressCluster.getMaximum()) {
            i+= value;
            progressCluster.setValue(i);
            progressCluster.update(progressCluster.getGraphics());

        }
    }
    
    public boolean checkElm(ArrayList<Cluster> meaning_cluster, int numCluster) {
    	boolean flag = true;
    	for(int i = 0; i < meaning_cluster.size(); i++) {
    		if(numCluster > meaning_cluster.get(i).getMeaningPoints().size()) {
    			flag = false;
    			return flag;
    		}
    		
    	}
    	return flag;
    }
    public void execute(Kmean k, FrequencyKMean fre) {
        flagMeaning = false;
        flagFrequency = false;
        if (rdMeaning.isSelected()) {
            flagMeaning = true;
            String str1 = textNumber1.getText();
            if ("".equals(str1)) {
                JOptionPane.showMessageDialog(null, "Chọn số cụm", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int number_cluster1 = Integer.parseInt(str1);
                k.NUM_CLUSTERS_MEANING = number_cluster1;
                if (k.NUM_CLUSTERS_MEANING == 1 || k.NUM_CLUSTERS_MEANING == 0) {
                    JOptionPane.showMessageDialog(null, "Số cụm phải lớn hơn 1");
                } else {

                    if (k.NUM_CLUSTERS_MEANING > k.original.find().count()) {
                        JOptionPane.showMessageDialog(null, "Số cụm 1 lớn hơn số mô hình", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {

//                        JOptionPane.showInternalMessageDialog(progressCluster, "Dang phan");
                        JOptionPane.showMessageDialog(null, "Đang tiến hành phân cụm", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
//                        k.execute1(centroid, vector);

                        Vector vectorCol = new Vector();
                        vectorCol.createCollectionVector(k.original, k.vector);

                        updateBar(16);

                        DBCursor cursorMeaning = k.vector.find();
                        k.initMeaningPoints(cursorMeaning);

                        updateBar(7);

                        k.calculate();

                        updateBar(30);
                        try {
                            Thread.sleep(2101);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFrameCluster.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        updateBar(20);
                        try {
                            Thread.sleep(1500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFrameCluster.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        updateBar(26);
                        k.insertMeaning_id(k.meaning_clusters, k.vector);

                        // creating table centroid
                        CollectionCentroid db = new CollectionCentroid();
                        db.insertMeaningCentroid(k.meaning_clusters, k.centroid);
                        updateBar(1);
                        JOptionPane.showMessageDialog(null, "Phân cụm hoàn thành", "Thông Bao", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            }

        } else if (rdBoth.isSelected()) {
            flagFrequency = true;
            String str1 = textNumber1.getText();
            String str2 = textNumber2.getText();

            if ("".equals(str1) || "".equals(str2)) {
                JOptionPane.showMessageDialog(null, "Chọn số cụm", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int number_cluster1 = Integer.parseInt(str1);
                int number_cluster2 = Integer.parseInt(str2);
                k.NUM_CLUSTERS_MEANING = number_cluster1;
                fre.NUM_CLUSTERS_FREQUENCY = number_cluster2;
                if (fre.NUM_CLUSTERS_FREQUENCY == 0 || k.NUM_CLUSTERS_MEANING == 1 || k.NUM_CLUSTERS_MEANING == 0 || fre.NUM_CLUSTERS_FREQUENCY == 1) {
                    JOptionPane.showMessageDialog(null, "Số cụm phải lớn hơn 1");
                } else {

                    if (k.NUM_CLUSTERS_MEANING > k.original.find().count()) {
                        JOptionPane.showMessageDialog(null, "Số cụm 1 lớn hơn số mô hình", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Đang tiến hành phân cụm", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);

                        Vector vectorCol = new Vector();
                        vectorCol.createCollectionVector(k.original, k.vector);

                        updateBar(16);

                        DBCursor cursorMeaning = k.vector.find();
                        k.initMeaningPoints(cursorMeaning);

                        updateBar(7);

                        k.calculate();

                        updateBar(30);
                        try {
                            Thread.sleep(1900);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFrameCluster.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        updateBar(20);
                        try {
                            Thread.sleep(1500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFrameCluster.class.getName()).log(Level.SEVERE, null, ex);
                        }
                       
                        k.insertMeaning_id(k.meaning_clusters, k.vector);

                        // creating table centroid
                        CollectionCentroid db = new CollectionCentroid();
                        db.insertMeaningCentroid(k.meaning_clusters, k.centroid);
                        
                        if(checkElm((ArrayList<Cluster>) k.meaning_clusters, fre.NUM_CLUSTERS_FREQUENCY) == false) {
                        	int click = JOptionPane.showConfirmDialog(null, "Chọn lại số cụm 2");
                        	if(click == JOptionPane.YES_OPTION) {
                        		progressCluster.getValue();
                        		progressCluster.setValue(0);
                        		progressCluster.update(progressCluster.getGraphics());
                        		textNumber1.setText("");
                        		textNumber2.setText("");
                        		
                        	}
                        	else {
                        		JOptionPane.showMessageDialog(null, "Phân cụm thất bại","Error",JOptionPane.ERROR_MESSAGE);
                                
                        	}
                        }
                        else {
                        	fre.execute2(k.meaning_clusters, k.vector, k.centroid);
                            updateBar(26);
                            updateBar(1);
                            JOptionPane.showMessageDialog(null, "Phân cụm hoàn thành", "Thông Báo", JOptionPane.PLAIN_MESSAGE);
                        }
                        
                        
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Chọn số tầng muốn phân cụm", "Error", JOptionPane.WARNING_MESSAGE);

        }
    }
    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed

    	Kmean k = new Kmean();
        FrequencyKMean fre = new FrequencyKMean();
        
        progressCluster.getValue();
		progressCluster.setValue(0);
		progressCluster.update(progressCluster.getGraphics());
        btnExecute.setEnabled(false);

        if (k.vector.find().count() == 0) {
            execute(k, fre);
            btnExecute.setEnabled(true);
        } else {
            int click = JOptionPane.showConfirmDialog(null, "Kết quả cũ sẽ bị xóa");
            switch (click) {
                case JOptionPane.YES_OPTION:

                    k.centroid.drop();
                    k.cluster.drop();
                    k.vector.drop();
                    execute(k, fre);
                    btnExecute.setEnabled(true);
                    break;
                case JOptionPane.NO_OPTION:
                    JOptionPane.showMessageDialog(null, "Hủy thao tác");
                    btnExecute.setEnabled(true);
                    break;
                default:
                    this.setVisible(false);
                    break;
            }
        }

    }//GEN-LAST:event_btnExecuteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void textNumber1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNumber1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNumber1ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    	Kmean k = new Kmean();
        if (k.original.find().count() == 0) {
            JOptionPane.showMessageDialog(null, "Chưa có dữ liệu", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

        }
    }//GEN-LAST:event_formWindowOpened

    private void progressClusterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressClusterStateChanged

    }//GEN-LAST:event_progressClusterStateChanged

    private void progressClusterPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_progressClusterPropertyChange

    }//GEN-LAST:event_progressClusterPropertyChange

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecute;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar progressCluster;
    private javax.swing.JRadioButton rdBoth;
    private javax.swing.JRadioButton rdMeaning;
    private javax.swing.JTextField textNumber1;
    private javax.swing.JTextField textNumber2;
    // End of variables declaration//GEN-END:variables
}
